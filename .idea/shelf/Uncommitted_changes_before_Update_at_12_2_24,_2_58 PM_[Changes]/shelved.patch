Index: Final Project/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nimport pandas as pd\nimport joblib\nfrom flask import Flask, render_template, request, jsonify\nfrom flask_mysqldb import MySQL\n\nfrom utils.model import train_model\n\napp = Flask(__name__)\n\napp.config['MYSQL_HOST'] = 'localhost'\napp.config['MYSQL_USER'] = 'root'\napp.config['MYSQL_PASSWORD'] = '1234'\napp.config['MYSQL_DB'] = 'Final_Project'\napp.config['MYSQL_PORT'] = 3306\napp.config['MYSQL_CONNECT_TIMEOUT'] = 60\n\nmysql = MySQL(app)\n\ndisease_recs = {\n    \"Hypertension\": \"https://www.cdc.gov/high-blood-pressure/about/index.html\",\n    \"Diabetes\": \"https://www.cdc.gov/diabetes/about/index.html\",\n    \"Heart Disease\": \"https://www.cdc.gov/heart-disease/about/index.html\",\n    \"Asthma\": \"https://www.cdc.gov/asthma/about/index.html\",\n    \"Cancer\": \"https://www.cdc.gov/cancer/index.html\",\n    \"Depression\": \"https://www.who.int/news-room/fact-sheets/detail/depression\",\n    \"Arthritis\": \"https://www.cdc.gov/arthritis/index.html\",\n    \"Chronic Kidney Disease\": \"https://www.cdc.gov/kidney-disease/index.html\",\n    \"Anxiety\": \"https://medlineplus.gov/anxiety.html#:~:text=Anxiety%20is%20a%20feeling%20of,before%20making%20an%20important%20decision\"\n}\n\n\ndef insert_new_patients(user_input):\n    try:\n        # Create a cursor object\n        conn = mysql.connection\n        if conn is None:\n            print(\"Issue with connection\")\n            return\n        cur = conn.cursor()\n        # Grabs the number of patients logged to find the new patients ID\n        cur.execute(\"SELECT COUNT(*) FROM User_Information\")\n        patient_id = f\"auth_{cur.fetchone()[0]+1}\"\n\n        # Grabs disease ID from disease name\n        cur.execute(f\"SELECT Disease_ID FROM Disease WHERE Disease_Name='{user_input['disease']}'\")\n        disease_id = cur.fetchone()[0]\n\n        # Determines if the user is obese, based on height and weight\n        is_obese = check_obese(user_input[\"height\"], user_input[\"weight\"])\n\n        # Concat values into a single list\n        values = (patient_id,\n                  user_input['first_name'],\n                  user_input['last_name'],\n                  user_input['race'],\n                  user_input['weight'],\n                  user_input['height'],\n                  user_input['gender'],\n                  is_obese,\n                  disease_id,\n                  user_input['age'],\n                  user_input['lifestyle'])\n\n        # Insert data into the database\n        insert = \"\"\"\n            INSERT INTO User_Information(Patient_ID, First_name, Last_name, \n                                         Race, Weight, Height, \n                                         Gender, Obesity, Disease_ID,\n                                         Age, Lifestyle) \n            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n            \"\"\"\n        cur.execute(insert, values)\n        conn.commit()\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n\ndef check_obese(height_inches, weight_lbs):\n    height_meters = height_inches * 0.0254\n    weight_kilograms = weight_lbs * 0.453592\n    bmi = weight_kilograms / (height_meters ** 2)\n    if bmi >= 30:\n        return True\n    else:\n        return False\n\ndef get_model():\n    conn = mysql.connection\n    if conn is None:\n        print(\"Issue with connection\")\n        return\n    cur = conn.cursor()\n\n    # Gets all user information in the database to fit Random Forest\n    cur.execute(\"\"\"\n        SELECT Race,Weight,Gender,Obesity,Age,Lifestyle,Disease_ID FROM Synthetic_data\n        UNION \n        SELECT Race,Weight,Gender,Obesity,Age,Lifestyle,Disease_ID FROM User_Information\n        \"\"\")\n\n    # Build dataframes for fitting\n    patient_data = pd.DataFrame(cur.fetchall(), columns=[\"race\", \"weight\", \"gender\",\n                                                         \"obesity\", \"age\",\"lifestyle\",\n                                                         \"disease_id\", ])\n    disease_data = patient_data[\"disease_id\"]\n    patient_data = patient_data.iloc[::, :-1]\n    patient_data[\"gender\"] = patient_data[\"gender\"].map({'Male':0, 'Female':1})\n    patient_data[\"race\"] = patient_data[\"race\"].map({'White':0, 'Black':1, 'Asian':2, 'Native American':3})\n    patient_data[\"lifestyle\"] = patient_data[\"lifestyle\"].map({'Sedentary':0, 'Active':1, 'Smoker':2, 'Non-Smoker':3})\n\n    return train_model(patient_data, disease_data)\n\n# Train and return the Random Forest model for predictions\nwith app.app_context():\n    print(\"Loading model...\")\n    try:\n        model = joblib.load(\"models/rf_model.pkl\")\n    except FileNotFoundError:\n        print(\"Model not found.\\nFitting new model...\")\n        model = get_model()\n        print(\"Model trained.\")\n    print(\"Model loaded.\")\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/predictor.html', methods=['GET'])\ndef predictor():\n    # Connect to db\n    conn = mysql.connection\n    if conn is None:\n        print(\"Issue with connection\")\n    cur = conn.cursor()\n    \n    # Grab all logged diseases\n    cur.execute(\"SELECT DISTINCT disease_name FROM Disease\")\n    currently_logged_diseases = cur.fetchall()\n    currently_logged_diseases = [row[0] for row in currently_logged_diseases]\n    return render_template('predictor.html', diseases=currently_logged_diseases)\n\n@app.route('/statistics')\ndef statistics():\n    return render_template('statistics.html')\n    \n\n\n@app.route('/submit', methods=['POST'])\ndef prediction_post():\n    data = request.get_json()\n\n    # Grab data from json object\n    user_input = {\n        \"first_name\": data.get('first_name'),\n        \"last_name\": data.get('last_name'),\n        \"age\": data.get('age'),\n        \"gender\": data.get('gender'),\n        \"height\": data.get('height_ft') * 12 + data.get('height_in'),\n        \"weight\": data.get('weight'),\n        \"race\": data.get('race'),\n        \"lifestyle\": data.get('lifestyle'),\n        \"disease\": data.get('disease'),\n        \"consent\": data.get('consent')\n    }\n    app.logger.info(user_input)\n\n    # Adds user data to database\n    if user_input[\"disease\"] != \"None\" and user_input[\"consent\"] == True:\n        insert_new_patients(user_input)\n\n    # Convert string Race into int index\n    user_race_index = -1\n    if user_input[\"race\"] == \"White\":\n        user_race_index = 0\n    elif user_input[\"race\"] == \"Black\":\n        user_race_index = 1\n    elif user_input[\"race\"] == \"Asian\":\n        user_race_index = 2\n    elif user_input[\"race\"] == \"Native American\":\n        user_race_index = 3\n\n    # Convert string Gender into int index\n    user_gender_index = -1\n    if user_input[\"gender\"] == \"Male\":\n        user_gender_index = 0\n    elif user_input[\"gender\"] == \"Female\":\n        user_gender_index = 1\n\n    # Convert string Lifestyle into int index\n    user_lifestyle_index = -1\n    if user_input[\"lifestyle\"] == \"Sedentary\":\n        user_lifestyle_index = 0\n    elif user_input[\"lifestyle\"] == \"Active\":\n        user_lifestyle_index = 1\n    elif user_input[\"lifestyle\"] == \"Smoker\":\n        user_lifestyle_index = 2\n    elif user_input[\"lifestyle\"] == \"Non-Smoker\":\n        user_lifestyle_index = 3\n    \n    # Build dataframe from user data\n    user_data = pd.DataFrame({\n        'race': [user_race_index],\n        'weight': [user_input[\"weight\"]],\n        'gender': [user_gender_index],\n        'obesity': [check_obese(user_input[\"height\"], user_input[\"weight\"])],\n        'age': [user_input[\"age\"]],\n        'lifestyle': [user_lifestyle_index]\n    })\n\n    # Prediction from model based on user data\n    prediction = model.predict(user_data)[0]\n\n    # Connect to db to gtab prediction name\n    conn = mysql.connection\n    if conn is None:\n        print(\"Issue with connection\")\n    cur = conn.cursor()\n    cur.execute(f\"SELECT Disease_Name FROM Disease WHERE Disease_ID = {prediction}\")\n    predicted_disease = cur.fetchone()[0]\n\n    # Return prediction to user\n    response = {\n        'status': 'success',\n        'prediction': predicted_disease,\n        'rec': disease_recs[predicted_disease]\n    }\n    return jsonify(response)\n\n@app.route(\"/quit\")\ndef _quit():\n    exit(0)\n\n\nif __name__ == '__main__':\n    app.run(host='localhost', port=4560, debug=True)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Final Project/main.py b/Final Project/main.py
--- a/Final Project/main.py	(revision 2b4466652e8a49e800a146a75f8bed1b6a17d95d)
+++ b/Final Project/main.py	(date 1733172991784)
@@ -10,7 +10,7 @@
 
 app.config['MYSQL_HOST'] = 'localhost'
 app.config['MYSQL_USER'] = 'root'
-app.config['MYSQL_PASSWORD'] = '1234'
+app.config['MYSQL_PASSWORD'] = 'Superpie1@'
 app.config['MYSQL_DB'] = 'Final_Project'
 app.config['MYSQL_PORT'] = 3306
 app.config['MYSQL_CONNECT_TIMEOUT'] = 60
